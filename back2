package main

import (
	"bytes"
	"crypto/rand"
	"encoding/binary"
	"fmt"
	"io"
	"log"
	"net"
	"net/http"
	"time"

	"github.com/gorilla/websocket"
)

// FileServer structure
type FileServer struct {
	clients map[*websocket.Conn]bool
	addCh   chan *websocket.Conn
	rmCh    chan *websocket.Conn
}

// Upgrader for WebSockets
var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool { return true }, // Allow all origins
}

// Start the TCP server
func (fs *FileServer) start() {
	fs.clients = make(map[*websocket.Conn]bool)
	fs.addCh = make(chan *websocket.Conn)
	fs.rmCh = make(chan *websocket.Conn)

	// Start WebSocket server
	go fs.websocketHandler()

	// Start TCP server for the original setup
	ln, err := net.Listen("tcp", ":9999")
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("TCP server started on :9999")

	for {
		conn, err := ln.Accept()
		if err != nil {
			log.Fatal(err)
		}
		go fs.readLoop(conn)
	}
}

// Read incoming file data from TCP
func (fs *FileServer) readLoop(conn net.Conn) {
	buf := new(bytes.Buffer)
	for {
		var size int64
		err := binary.Read(conn, binary.LittleEndian, &size)
		if err != nil {
			log.Println("Failed to read size:", err)
			return
		}

		n, err := io.CopyN(buf, conn, size)
		if err != nil {
			log.Println("Failed to receive data:", err)
			return
		}

		fmt.Printf("Received %d bytes over TCP\n", n)

		// Broadcast data to all WebSocket clients
		fs.broadcast(buf.Bytes())
		buf.Reset()
	}
}

// Send file data to the TCP server
func sendFile(size int) error {
	file := make([]byte, size)
	_, err := io.ReadFull(rand.Reader, file)
	if err != nil {
		return err
	}

	conn, err := net.Dial("tcp", ":9999")
	if err != nil {
		log.Fatal(err)
	}
	defer conn.Close()

	binary.Write(conn, binary.LittleEndian, int64(size))
	n, err := io.CopyN(conn, bytes.NewReader(file), int64(size))
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Sent %d bytes over the network\n", n)
	return nil
}

// Check if the TCP server is running
func (fs *FileServer) checkServerRunning() bool {
	conn, err := net.Dial("tcp", "localhost:9999")
	if err != nil {
		return false // Server is not running
	}
	defer conn.Close()
	return true // Server is running
}

// WebSocket handler
func (fs *FileServer) websocketHandler() {
	http.HandleFunc("/ws", func(w http.ResponseWriter, r *http.Request) {
		conn, err := upgrader.Upgrade(w, r, nil)
		if err != nil {
			log.Println("Failed to upgrade WebSocket:", err)
			return
		}
		fs.addCh <- conn

		// Listen for messages (optional)
		go func() {
			for {
				_, _, err := conn.ReadMessage()
				if err != nil {
					fs.rmCh <- conn
					break
				}
			}
		}()
	})

	go func() {
		for {
			select {
			case conn := <-fs.addCh:
				fs.clients[conn] = true
				fmt.Println("New WebSocket client connected!")
			case conn := <-fs.rmCh:
				delete(fs.clients, conn)
				conn.Close()
				fmt.Println("WebSocket client disconnected!")
			}
		}
	}()

	fmt.Println("WebSocket server started on :8080")
	log.Fatal(http.ListenAndServe(":8080", nil))
}

// Broadcast data to all connected WebSocket clients
func (fs *FileServer) broadcast(data []byte) {
	for conn := range fs.clients {
		err := conn.WriteMessage(websocket.BinaryMessage, data)
		if err != nil {
			fs.rmCh <- conn
		}
	}
}

func main() {
	server := &FileServer{}

	// Check if the server is already running
	if server.checkServerRunning() {
		fmt.Println("Server is already running on port 9999!")
		return
	}

	go func() {
		time.Sleep(2 * time.Second)
		sendFile(2000000)
	}()

	server.start()
}

